/****************************************************************************
* @version 1.0
* @date - 2018/4/16
* @author sohi
* @brief ????? C++ ??�?? ??? C ??????? ????? ???????.
* @detail ??? : ??? ??????? C/C++ (http://www.soen.kr/)
*            ??.Turboc.h http://soen.kr/lecture/ccpp/cpp1/6-4-4.htm
*****************************************************************************/

#ifndef TURBOC_HEADER //TURBOC_HEADER ?????? ?????? ???? ?????? ??? ???? ??????
#define TURBOC_HEADER
#include <stdio.h>
#include <stdlib.h>
#include <conio.h>
#include <time.h>
#include <windows.h>
#include <stdbool.h>

	typedef enum { NOCURSOR, SOLIDCURSOR, NORMALCURSOR } cursor_type;

	void clearScreen();			// ????? ??? ?????. //tc->clrscr();
	void gotoXY(int x, int y);	// ��???? x,y????? ????????.
	int whereX();				// ��???? x ????? ???????.
	int whereY();				// ��???? y ????? ???????.
	void setCursorType(cursor_type c);	// ��???? ?????? ??? ??????.

	#define delay(n) Sleep(n)							// n/1000???? ?��? ????
	#define randomize() srand((unsigned)time(NULL))		// ???? ????? clearScreen
	                     //<stdlib.h> srand??? : ???? ????? ???? ???.
	#define random(n) (rand() % (n))					//0~n?????? ???? ???
						 //<stdlib.h> rand??? : ????????? ?????? ???????.

	// ?? ?????? ?????? ?????? ????? ?????? ??????? ????? ???? ??��?.
	#ifndef TURBOC_PROTOTYPE_ONLY
		/**
		* @brief clearScreen ????? ????? ��???? (1,1)?? ????.
		*/
		void clearScreen()
		{
			system("cls");
		}

		/**
		* @brief gotoXY ???????? ��???? (x,y)?? ????????.
		* @param int ?????????? ???? ????? ????
		* @param int ?????????? ???? ????? ????
		*/
		void gotoXY(int x, int y)
		{
			COORD Cur;
			Cur.X = x;
			Cur.Y = y;
			SetConsoleCursorPosition(GetStdHandle(STD_OUTPUT_HANDLE), Cur);
		}

		/**
		* @brief whereX ��???? X ????? ???????.
		* @return int ???? X ???
		*/
		int whereX()
		{
			CONSOLE_SCREEN_BUFFER_INFO BufInfo;

			GetConsoleScreenBufferInfo(GetStdHandle(STD_OUTPUT_HANDLE), &BufInfo);
			return BufInfo.dwCursorPosition.X;
		}

		/**
		* @brief whereY ��???? Y ????? ???????.
		* @return int ???? Y ???
		*/
		int whereY()
		{
			CONSOLE_SCREEN_BUFFER_INFO BufInfo;

			GetConsoleScreenBufferInfo(GetStdHandle(STD_OUTPUT_HANDLE), &BufInfo);
			return BufInfo.dwCursorPosition.Y;
		}

		/**
		* @brief setCursorType ��???? ????? ???????.
		* @param cursor_type NOCURSOR(0), SOLIDCURSOR(1), NORMALCURSOR(2)
		*/ 
		void setCursorType(cursor_type c)
		{
			CONSOLE_CURSOR_INFO CurInfo;

			switch (c) {
			case NOCURSOR:
				CurInfo.dwSize = 1;
				CurInfo.bVisible = FALSE;
				break;
			case SOLIDCURSOR:
				CurInfo.dwSize = 100;
				CurInfo.bVisible = TRUE;
				break;
			case NORMALCURSOR:
				CurInfo.dwSize = 20;
				CurInfo.bVisible = TRUE;
				break;
			}
			SetConsoleCursorInfo(GetStdHandle(STD_OUTPUT_HANDLE), &CurInfo);
		}

	#endif // TURBOC_PROTOTYPE_ONLY
#endif // TURBOC_HEADER
